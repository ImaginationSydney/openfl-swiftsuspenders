package avmplus;

#if flash

import msignal.Signal.Signal0;
import openfl.Assets;
import openfl.display.Loader;
import openfl.events.Event;
import openfl.system.ApplicationDomain;
import openfl.system.LoaderContext;
import openfl.utils.ByteArray;

/**
 * ...
 * @author P.J.Shand
 */
class DescribeTypeJSON
{
	public static var INSTANCE_FLAGS:UInt = (((((((((INCLUDE_BASES | INCLUDE_INTERFACES) | INCLUDE_VARIABLES) | INCLUDE_ACCESSORS) | INCLUDE_METHODS) | INCLUDE_METADATA) | INCLUDE_CONSTRUCTOR) | INCLUDE_TRAITS) | USE_ITRAITS) | HIDE_OBJECT);
    public static var CLASS_FLAGS:UInt = ((((((INCLUDE_INTERFACES | INCLUDE_VARIABLES) | INCLUDE_ACCESSORS) | INCLUDE_METHODS) | INCLUDE_METADATA) | INCLUDE_TRAITS) | HIDE_OBJECT);
	
	public static inline var INCLUDE_BASES:UInt = 0x0002;
	public static inline var INCLUDE_INTERFACES:UInt = 0x0004;
	public static inline var INCLUDE_VARIABLES:UInt = 0x0008;
	public static inline var INCLUDE_ACCESSORS:UInt = 0x0010;
	public static inline var INCLUDE_METHODS:UInt = 0x0020;
	public static inline var INCLUDE_METADATA:UInt = 0x0040;
	public static inline var INCLUDE_CONSTRUCTOR:UInt = 0x0080;
	public static inline var INCLUDE_TRAITS:UInt = 0x0100;
	public static inline var USE_ITRAITS:UInt = 0x0200;
	public static inline var HIDE_OBJECT:UInt = 0x0400;
	
	static var bytesInt:Array<Int>;
	
	static var DescribeTypeJSONAs3Class:Class<Dynamic>;
	static var describeTypeJSONAs3:Dynamic;
	static var describeTypeFunc: Dynamic -> Int -> Dynamic;
   
	public static var available(get, null):Bool;
	public static var loadComplete:Bool;
	public static var ready = new Signal0();
	
	static var callbacks = new Array<Void -> Void>();
	
	static function __init__():Void
	{
		bytesInt = [67, 87, 83, 29, -80, 5, 0, 0, 120, -38, 109, 83, -35, 110, -30, 70, 20, -98, 25, -125, -121, -1, 64, -56, -110, 100, -77, -39, -46, -18, 69, 110, 10, 54, 108, -91, 42, 40, -117, -22, 24, -40, -80, -54, -126, -124, 73, 85, -83, -44, -60, -125, 25, -126, -69, -58, -74, 108, -13, -109, -85, -66, 69, -17, 123, -47, 11, -44, -121, -24, 3, -12, -94, -76, -41, 125, -128, -66, 69, 58, -74, 97, 67, 86, 25, -39, 48, -25, 59, -33, -7, -50, -15, -100, 51, 11, -128, 87, 0, -20, -37, 0, -68, -124, -96, -111, 59, 4, 0, -4, -100, -1, 19, 2, 112, -26, 12, 71, -75, 94, -93, 85, 92, 76, 12, -45, -83, 49, -21, -51, -55, -40, -13, -20, -102, 32, -52, -25, -13, -14, -4, 117, -39, 114, 110, -123, -54, -23, -23, -87, 32, 86, -123, 106, -75, -60, 24, 37, -9, -50, -12, -56, -94, 100, -70, -81, 78, -22, -127, 64, -125, -70, -102, -93, -37, -98, 110, -103, 69, -33, 38, 3, 107, -22, -67, 57, 57, 89, -85, 14, -75, 79, -94, -10, -44, 49, 2, -55, -95, 38, 80, -125, 78, -88, -23, -71, 66, -91, 92, 97, 66, 67, -83, 54, -78, -100, 9, -15, -22, -60, -74, 13, 93, 35, -66, -100, -80, 40, -71, 99, 75, -5, 56, 39, 51, 90, 26, 25, -60, 29, -97, 9, 15, 68, 63, -58, -45, 61, -125, -42, -91, -95, 53, -96, -59, -106, 65, 23, -59, 111, -118, -46, 67, 124, -64, 14, 41, 62, 121, -8, 80, 104, 125, -21, 51, -119, 31, 93, -42, -84, -119, 96, 59, -42, 112, -86, -79, -102, 70, 76, 42, 8, -34, 14, -15, 37, -20, -23, -64, -48, -35, 49, 117, -22, 83, -13, -93, 105, -51, -61, 20, 15, -88, -49, -47, 28, 74, 60, -21, 49, 99, -125, -7, 126, -125, -104, -73, 83, 114, 75, -21, -51, 78, -32, -5, 100, 7, 53, 18, -113, -42, -69, -102, 87, -84, -98, 126, 93, -84, -118, -107, 111, -61, 50, 124, -12, 76, -8, -20, -76, -41, 8, 107, 96, 29, 52, -78, -1, 113, 103, 64, 70, -9, -9, -9, 31, 18, 28, -21, 48, -49, -34, 8, -1, -21, 7, 16, -84, -65, -116, -33, 70, 55, -84, -29, -1, 38, -56, 108, 98, 27, 83, -9, 38, -44, 25, -48, -2, -99, 77, -33, 41, -35, -114, -28, -66, 6, 127, -20, 41, 44, -108, -47, -64, -56, 33, 19, 90, 1, 89, 80, 6, -120, -103, 95, 1, 78, 55, 61, -66, 59, -8, -119, 106, 94, 100, -54, -10, 81, -103, -75, -61, -59, 107, -75, -4, 19, 106, -23, -96, 97, -27, -95, -18, -38, 6, -71, -29, 21, -37, -47, 61, 122, -76, 14, -88, 61, 17, -112, 26, 110, 97, -123, 91, -22, -75, 77, -41, 35, -90, 70, -73, 62, 57, -49, -32, 32, -13, 22, 22, 39, 51, -94, 27, 100, 96, 80, 124, 110, 89, 6, 37, 102, -90, -35, 81, -6, 82, 71, 110, -34, -76, 46, -91, -73, 74, 82, -66, -108, 20, 37, -36, 103, -121, -97, 37, 78, -73, 59, -14, -27, 85, -93, 121, 115, 46, 41, 77, 101, 119, 99, -75, 59, -3, 102, -81, 37, -55, 77, 37, -73, -127, -66, -105, 122, 109, -23, -4, 114, 11, -111, 100, -26, 87, -70, 61, 101, 103, -125, -68, 111, -10, 47, -70, 13, 37, -69, 101, 75, 13, -87, 47, -27, 55, -128, -36, 101, -91, -11, -82, -28, 126, -73, -105, -39, 96, -3, -98, -44, -18, 43, -55, 43, -123, -91, 93, -17, 47, -38, 12, -17, -98, -65, 107, -54, -3, 84, 120, -114, 116, -26, -33, -106, -99, -90, -1, -41, 96, 103, 74, 60, -115, 13, 92, -70, 17, 30, 111, -40, -103, 92, -37, -12, -88, 67, 52, 79, -97, -47, 16, 41, 60, -14, -53, 22, -69, -70, -70, 73, 29, 92, -128, 5, -66, 16, 59, 72, -20, -13, -123, 99, 112, -116, 33, -62, -112, -61, 48, -126, 97, 20, 35, -116, -71, 56, -122, 73, 12, 83, 24, -90, 49, -52, 96, -72, -125, 97, 22, -61, 28, -114, -18, 98, -108, -57, 104, 15, -93, 103, 24, 21, 48, -38, -57, -24, 0, -93, 67, -116, -98, 99, 116, -124, -47, 11, -52, -65, -60, -36, 23, -104, 43, 98, -18, 75, 127, -2, -40, 40, 65, 16, -125, -112, 67, 8, -7, -125, -123, 34, -21, -97, 96, -63, 40, 31, -113, 0, 63, 47, 64, 49, 8, -72, 56, 4, 17, -64, 37, 0, 76, -126, 20, -49, -8, 105, -98, -29, 24, 9, 70, 35, -112, 77, 51, 7, 99, -15, -26, 74, -68, 78, -88, -103, -30, -17, -65, -112, -60, 117, 74, -35, 81, -77, 75, 53, -73, 84, 119, -105, 106, 126, -87, -18, 45, -43, 103, 75, -75, -80, 84, -9, -105, -22, -63, 114, -100, -70, 78, -85, -39, 71, -34, 66, -128, -89, -33, -78, -52, 16, -59, 19, -4, 74, 92, -75, 1, -77, 16, -57, -59, 19, -119, -107, -8, 99, -26, -17, 127, 90, 25, 116, 1, 0, -57, 49, 127, 50, 64, -44, 84, 8, 69, -74, -96, 116, 8, 69, 17, -124, -79, 87, 43, -111, 2, 21, -119, -22, -95, -88, 62, 23, -43, 35, 81, 125, 33, -86, 60, 123, 126, 0, -57, -63, 26, 71, 89, -118, 98, -34, -65, 84, -21, -39, 47, 63, 117, -11, -66, 99, -2, -1, 1, 77, 62, -109, -83, 67, 87, 83, 29, -23, 3, 0, 0, 120, -38, 109, 82, 65, 78, -37, 64, 20, -3, 99, 27, 79, 98, -96, 4, 81, 5, -86, -86, -107, 37, 22, -39, 52, -74, 19, 42, 85, -119, -126, 85, 68, -96, -91, 11, -112, 74, 23, 21, 82, 69, 38, -10, 36, 49, 56, -74, 107, -113, -109, -80, -22, 5, 122, -119, -98, -92, 7, -24, 38, -19, -70, 7, -88, -44, 67, -48, 25, -37, 37, -128, 24, -115, 101, -1, -9, -33, 123, -13, -3, -1, -52, 0, -49, 1, 54, 35, -128, -25, 8, -70, -21, 79, 0, -32, -53, -58, 15, 4, -48, -119, -35, 65, -5, 125, -9, 80, -97, -115, -3, 32, 105, -13, 104, -73, 54, 98, 44, 106, -101, -26, 116, 58, 53, -90, 59, 70, 24, 15, -51, 70, -85, -43, 50, -83, -90, -39, 108, -42, 57, -93, -98, 92, 5, -116, -52, -22, 65, -78, 93, -77, 51, -125, 46, 77, -100, -40, -117, -104, 23, 6, -70, -120, 73, 63, 76, -39, 110, -83, 86, -72, -70, -50, -115, 105, -108, -58, 126, 102, -23, 58, 38, -11, -23, -104, 6, 44, 49, 27, 70, -125, 27, -71, 78, 123, 16, -58, 99, -62, 108, 18, 69, -66, -25, 16, 97, 103, -50, -22, -55, 40, 116, 46, -89, 100, 66, -21, 3, -97, 36, -93, -114, -71, 32, 10, 13, -13, -104, 79, -19, 61, 55, -20, 83, -3, -48, -89, 51, -3, -91, -66, -73, -48, 103, -20, -100, 34, -56, -18, -94, 80, -5, -42, 111, 18, -95, 54, -100, 112, 108, 70, 113, -24, -90, 14, -81, 105, -64, -83, 50, -15, 109, -119, -80, -120, -46, -66, -17, 37, 35, 26, -37, 105, 112, 25, -124, -45, -4, -120, 5, 42, 56, 78, 76, 9, 11, -17, 50, -2, 99, 34, -17, -109, 96, -104, -110, 33, -75, 15, -114, -77, -36, 77, -100, -43, 72, 24, -75, 79, 28, -90, 55, 91, 47, -12, -90, -43, 120, -107, -105, 33, -48, -114, 121, -81, -37, 5, -62, 7, 104, 67, -73, -14, 71, -18, -64, -66, 116, 125, 125, 125, -90, -55, 124, -62, 42, 127, 20, -11, -37, 25, 100, 107, -21, -13, -33, -63, 57, -97, -8, 111, -115, 76, -58, -111, -97, 38, -25, -71, 79, -97, 126, -72, -118, -24, -69, -45, -109, -29, -67, 100, 7, -66, 63, -2, -54, 57, 124, -61, 32, 38, 99, -38, -128, 10, 24, 66, 93, 1, -11, -92, 127, 65, 29, -90, -92, 94, -64, 112, 97, -79, -15, -128, -59, 106, 54, 37, -61, -11, -110, -56, 39, 87, -22, 105, 20, 123, -116, 62, 45, 4, -19, 7, 4, 43, -18, 45, -84, -30, -34, 35, -84, -28, 118, 116, 34, 110, -54, -38, -127, 120, 117, -71, 53, 97, 14, 111, -10, 106, 55, 63, 37, 47, 109, -3, 40, 96, 52, 38, 14, -13, 38, 52, 71, -86, 119, -14, -5, 33, -65, -74, 94, 64, 99, 92, 69, 85, -91, -86, 110, -107, 54, -107, -22, 50, 44, 99, 36, 97, 36, 99, 105, 9, -53, 24, -93, 50, 94, -46, -80, -70, -126, -27, 85, 44, 63, -62, -14, -102, 2, -59, -110, 16, -110, -118, 79, 36, 43, 101, 5, 16, 90, 66, 32, -119, -120, -57, 8, 4, 80, 42, -53, 115, -21, 13, -121, 16, 42, 107, -22, -36, -102, 31, 1, -113, 36, 89, 46, 107, -38, -36, -6, -92, -2, -4, 117, -88, 74, 111, 1, 100, 110, 86, -38, -98, 91, 20, 122, -56, -22, 97, -85, 87, -78, 122, 101, -85, -89, 89, 61, -123, -17, -113, -16, 44, 91, 35, -103, -117, -11, 13, 49, -115, -94, 127, -58, 67, 51, 123, -51, -13, -1, 0, 17, 70, 35, 120, 67, 87, 83, 29, -23, 3, 0, 0, 120, -38, 109, 82, 77, 78, -37, 64, 20, 126, 99, 27, 79, 98, -96, 4, 81, -123, 86, -3, -111, 37, 22, 89, -76, -79, -99, 80, -87, 74, 20, -84, 34, 2, 45, 93, -128, 84, -70, -88, -112, 16, -103, -40, -109, -60, -59, -79, 45, 123, -100, -124, 85, 47, -48, 75, -12, 36, 61, 64, 55, 105, -41, 61, 64, -105, -67, 1, -99, -79, 93, 2, -120, -47, 88, -10, -5, -34, -9, 125, -13, -4, -34, -52, 0, -49, 1, 54, 35, -128, -25, 8, -70, -21, -113, 1, -32, -53, -58, 15, 4, -48, -119, -35, 65, -5, 67, -9, 64, -97, -115, -3, 32, 105, -13, 104, -89, 54, 98, 44, 106, -101, -26, 116, 58, 53, -90, -37, 70, 24, 15, -51, 70, -85, -43, 50, -83, -90, -39, 108, -42, 57, -93, -98, 92, 6, -116, -52, -22, 65, -78, 85, -77, 51, -125, 46, 77, -100, -40, -117, -104, 23, 6, -70, -120, 73, 63, 76, -39, 78, -83, 86, -72, -70, -50, -75, 105, -108, -58, 126, 102, -23, 58, 38, -11, -23, -104, 6, 44, 49, 27, 70, -125, 27, -71, 78, 123, 16, -58, 99, -62, 108, 18, 69, -66, -25, 16, 97, 103, -50, -22, -55, 40, 116, 46, -90, 100, 66, -21, 3, -97, 36, -93, -114, -71, 32, 10, 13, -13, -104, 79, -19, 93, 55, -20, 83, -3, -64, -89, 51, -3, -107, -66, -69, -48, 103, -20, -100, 34, -56, -18, -94, 80, -5, -58, 111, 18, -95, 54, -100, 112, 108, 70, 113, -24, -90, 14, -81, 105, -64, -83, 50, -15, 77, -119, -80, -120, -46, -66, -17, 37, 35, 26, -37, 105, 112, 17, -124, -45, -4, -120, 5, 42, 56, 78, 76, 9, 11, 111, 51, -2, 99, 34, -17, -109, 96, -104, -110, 33, -75, -9, -113, -78, -36, 117, -100, -43, 72, 24, -75, -113, 29, -90, 55, 91, 47, -11, -90, -43, 120, -99, -105, 33, -48, -114, 121, -89, -37, 5, -62, 7, 104, 67, -73, -14, 71, -18, -64, -98, 116, 117, 117, 117, -86, -55, 124, -62, 42, 127, 20, -11, -37, 41, 100, -21, -59, -45, -65, -125, 115, 62, -15, -33, 26, -103, -116, 35, 63, 77, -50, 115, -97, 62, -3, 120, 25, -47, -9, 39, -57, 71, -69, -55, 54, 124, 127, -8, -107, 115, -8, -122, 65, 76, -58, -76, 1, 21, 48, -124, -70, 2, -22, 113, -1, 51, 117, -104, -110, 122, 1, -61, -123, -59, -58, 61, 22, -85, -39, -108, 12, -41, 75, 34, -97, 92, -86, 39, 81, -20, 49, -6, -92, 16, -76, -17, 17, -84, -72, 55, -80, -118, 123, -121, -80, -110, -37, -47, -119, -72, 41, 107, -5, -30, -43, -27, -42, -124, 57, -68, -39, -85, -35, -4, -108, -68, -76, -11, -61, -128, -47, -104, 56, -52, -101, -48, 28, -87, -34, -54, -17, -123, -4, -38, 122, 1, -115, 113, 21, 85, -107, -86, -6, -88, -76, -87, 84, -105, 97, 25, 35, 9, 35, 25, 75, 75, 88, -58, 24, -107, -15, -110, -122, -43, 21, 44, -81, 98, -7, 1, -106, -41, 20, 40, -106, -124, -112, 84, 124, 34, 89, 41, 43, -128, -48, 18, 2, 73, 68, 60, 70, 32, -128, 82, 89, -98, 91, 111, 57, -124, 80, 89, 83, -25, -42, -4, 16, 120, 36, -55, 114, 89, -45, -26, -42, -103, -6, -13, -41, -127, 42, -67, 3, -112, -71, 89, 105, 107, 110, 81, -24, 33, -85, -121, -83, 94, -55, -22, -107, -83, -98, 102, -11, 20, -66, 63, -63, -77, 108, -115, 100, 46, -42, 55, -60, 52, -118, -2, 25, -9, -51, -20, 13, -49, -1, 3, -97, -100, 35, 59];
		var bytes:ByteArray = new ByteArray();
		for (i in 0...bytesInt.length) 
		{
			bytes.writeByte(bytesInt[i]);
		}
		
		var ldrContext:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain); 
		ldrContext.allowCodeImport = true;
		ldrContext.allowLoadBytesCodeExecution = true;
		
		var loader:Loader = new Loader();
		loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event):Void
		{
			DescribeTypeJSONAs3Class = Type.resolveClass("avmplus.DescribeTypeJSONAs3");
			describeTypeJSONAs3 = Type.createInstance(DescribeTypeJSONAs3Class, []);
			describeTypeFunc = Reflect.getProperty(describeTypeJSONAs3, "describeType");
			loadComplete = true;
			ready.dispatch();
		});
		loader.loadBytes(bytes, ldrContext);
	}
	
	public static function init() 
	{
		//var bytes:ByteArray = Assets.getBytes("swf/DescribeTypeJSON.swf");
		//bytes.position = 0;
		//while (bytes.bytesAvailable > 0) 
		//{
			//bytesInt.push(bytes.readByte());
		//}
		//trace(bytesInt);
	}
	
	public static function describeType(target : Dynamic, flags : Int) : Dynamic
    {
		if (!available || !loadComplete) return null;
        return describeTypeFunc(target, flags);
    }
    
    public static function getInstanceDescription(type : Class<Dynamic>) : Dynamic
    {
       if (!available || !loadComplete) return null;
	   return describeTypeFunc(type, INSTANCE_FLAGS);
    }
    
    public static function getClassDescription(type : Class<Dynamic>) : Dynamic
    {
        if (!available || !loadComplete) return null;
		return describeTypeFunc(type, CLASS_FLAGS);
    }
	
	static public function add(callback:Void -> Void) 
	{
		if (loadComplete) callback();
		else {
			callbacks.push(callback);
			ready.addOnce(OnLoadComplete);
		}
	}
	
	static private function OnLoadComplete() 
	{
		for (i in 0...callbacks.length) 
		{
			callbacks[i]();
		}
		callbacks = [];
	}
	
	static function get_available():Bool 
	{
		return describeTypeJSONAs3 != null;
	}
}
#else
class DescribeTypeJSON
{
	static public function add(callback:Void -> Void) 
	{
		callback();
	}
}

#end